version: "3.7"
services:
  whispr:
    image: sanofiiadc/whispr:latest
    container_name: whispr
    ports:
      - 3000:3000
    environment:
      AUTO_SCHEMA_FILE: schema.gql
      INTROSPECTION: "true"
      PLAYGROUND: "true"
      SSL_VALIDATE: "false"
      LOG_LEVEL: 5
      MONGOOSE_HOST: mongo1
      MONGOOSE_PORT: 27017
      # MONGOOSE_USERNAME:
      # MONGOOSE_PASSWORD:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_HOST_READ: redis
      REDIS_PORT_READ: 6379
      NODE_ENV: local
      # COGNITO_ADMIN_USER:
      # COGNITO_ADMIN_PW:
      # COGNITO_USER_POOL_ID:
      # COGNITO_CLIENT_ID_ADMIN:
      # COGNITO_REGION:
      # COGNITO_IDENTITY_POOL_ID:
      # AWS_CONTAINER_CREDENTIALS_RELATIVE_URI:
      # AWS_S3_ENDPOINT:
      # AWS_BUCKET_NAME:
      
      # auth configuration that accept JWT sign√© with a secret value "test"
      AUTH_CONFIG_SECRET: '{"config":[{"ignoreExpiration":false,"jwtFromRequest":{"funcName":"fromAuthHeaderAsBearerToken"},"secretOrKeyFromEnv":"JWT_SECRET_EOEE"}]}'
      JWT_SECRET_EOEE: "test"

      # auth configuration that disable ahtuentication
      #AUTH_CONFIG_SECRET: '{"config":[{"passthrough":"true","ignoreExpiration":false,"jwtFromRequest":{"funcName":"fromAuthHeaderAsBearerToken"},"secretOrKeyFromEnv":"JWT_SECRET_EOEE"}]}'
      #JWT_SECRET_EOEE: "test"
      
      # disable color when your terminal doesn't handle it
      NO_COLOR: "true"
      
      # NODE_TLS_REJECT_UNAUTHORIZED: 0 # disable ssl cert check
      
      # Certificate configuration example
      #CA_CERTIFICATE_PATH: "/app/ca.pem,/app/DigiCert-SHA2-High-Assurance-Server-CA.cer,/app/DigiCert-High-Assurance-EV-Root-CA.cer,/app/DigiCert-TLS-RSA-SHA256-2020-CA1.crt"
      
      # Way to add certificate directly to nodejs
      #NODE_EXTRA_CA_CERTS: "/app/ca.pem"
      
      # local proxy configuration for debug (e.g squid)
      # HTTP_PROXY: http://myproxy.local:3128
      # HTTPS_PROXY: http://myproxy.local:3128
      # HOST_HOSTNAME: myproxy.local
      # NO_PROXY: "localhost"
    networks: ["stack"]
  mongo1:
    hostname: mongo1
    container_name: localmongo1
    image: mongo
    expose:
      - 27017
    restart: always
    networks: ["stack"]
    volumes:
      - mongodb1:/data/db
  redis:
    image: redis
    hostname: redis
    container_name: redis
    expose:
      - 6379
    volumes:
      - redis:/var/lib/redis
    networks: ["stack"]
  localstack:
    hostname: localstack
    container_name: localstack
    image: localstack/localstack
    environment:
      - SERVICES=s3
    ports:
      - "4566"
    restart: always
    volumes:
      - ./aws:/docker-entrypoint-initaws.d
      - localstack:/tmp/localstack
      - localstackdata:/tmp/localstack/data
    networks: ["stack"]
networks:
  stack:
volumes:
  mongodb1:
  redis:
  localstack:
  localstackdata:
