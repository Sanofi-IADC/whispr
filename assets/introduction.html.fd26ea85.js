import{_ as a,c as n}from"./app.de75fd29.js";const s={},t=n(`<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>Whispr offers two APIs: GraphQL and REST. You are highly encouraged to use GraphQL API but in case you can&#39;t you still have the REST API available.</p><h2 id="input-file" tabindex="-1"><a class="header-anchor" href="#input-file" aria-hidden="true">#</a> Input file</h2><p>The payload you have to provide for both GraphQL and REST endpoints is described in the <code>entityName.input.ts</code> file.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Field <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/graphql&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsOptional<span class="token punctuation">,</span> IsString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WhispInputType</span>  <span class="token punctuation">{</span>
  @<span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">nullable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// GraphQL annotations</span>
  @<span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> @<span class="token function">IsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// class-validator annotations, used by Nest Validation Pipe</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>GraphQL annotations are needed by graphql to describe the endpoint.</p></li><li><p>class-validator annotations are used to validate REST payloads.</p></li></ul><p><strong>Note</strong>: class-validator will also validate GraphQL payloads, but since the GraphQL validation happens before class-validator validation, and the rules should be the same, class-validator validation should always pass.</p><p><strong>Warning</strong>: we use Nest validation pipe with whitelist option enabled. Therefore you must provide a class-validator annotation on fields you want to add, or they will be automatically removed by the validation pipe.</p>`,9);function e(p,o){return t}var l=a(s,[["render",e],["__file","introduction.html.vue"]]);export{l as default};
