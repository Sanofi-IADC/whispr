import{_ as a,r as t,o,a as p,b as n,d as r,F as l,e as s,c as i}from"./app.160e70af.js";const c={},u=n("h1",{id:"plugins",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#plugins","aria-hidden":"true"},"#"),s(" Plugins")],-1),d=n("h2",{id:"create-a-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-a-plugin","aria-hidden":"true"},"#"),s(" Create a plugin")],-1),h=n("p",null,"Create a new repository and clone it to you computer.",-1),m=s("Publish this repository to npm by following npm's documentation: "),k={href:"https://docs.npmjs.com/creating-node-js-modules",target:"_blank",rel:"noopener noreferrer"},b=s("https://docs.npmjs.com/creating-node-js-modules"),g=i(`<h2 id="add-your-plugin-to-whispr" tabindex="-1"><a class="header-anchor" href="#add-your-plugin-to-whispr" aria-hidden="true">#</a> Add your plugin to whispr</h2><ul><li>Add the package of your plugin:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> your-plugin --save
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Add the name of your plugin in the plugins enum of the <code>src/event/event.service.ts</code> file:</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> pluginNames <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;your-plugin&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="make-your-plugin-register-listeners" tabindex="-1"><a class="header-anchor" href="#make-your-plugin-register-listeners" aria-hidden="true">#</a> Make your plugin register listeners</h2><p>In your plugin&#39;s <code>index.js</code> file, export a <code>listeners</code> property that is an array of listeners.</p><p>Those listeners must have the following properties:</p><ul><li><code>callback</code>: a function that has the signature of the <code>ListenerCallback</code> type in the <code>src/interfaces/listener.interface.ts</code> file.</li><li><code>eventName</code>: one of the EventNames registered in the enum of the <code>event.entity.ts</code> file.</li><li><code>filter</code>: allows you to filter on the event if you want your callback to be called only for events of a specific payload. See <a href="../filters">filters documentation</a>.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">// index.js</span>

    module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* your code */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">eventName</span><span class="token operator">:</span> <span class="token string">&#39;WHISP_CREATED&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span> <span class="token comment">// other listeners</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,10);function f(v,y){const e=t("ExternalLinkIcon");return o(),p(l,null,[u,d,h,n("p",null,[m,n("a",k,[b,r(e)])]),g],64)}var x=a(c,[["render",f],["__file","index.html.vue"]]);export{x as default};
