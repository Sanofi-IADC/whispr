import{_ as e,c as t}from"./app.9741e613.js";const n={},s=t(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># unit tests</span>
$ <span class="token function">npm</span> run <span class="token builtin class-name">test</span>

<span class="token comment"># e2e tests</span>
$ <span class="token function">npm</span> run test:e2e

<span class="token comment"># test coverage</span>
$ <span class="token function">npm</span> run test:cov
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests" aria-hidden="true">#</a> Unit Tests</h2><p>The unit test is a way of testing a unit , the smallest possible unit of code that can be logically isolated in a system. These units are tested to determine if there are any issues when the developer make the change in the code base. It should count for the majority of the tests we can have. Normally, only test one method each. Example : Whisp, Subscription To run the unit test locally :npm run test:unit:cov</p><h2 id="integration-tests" tabindex="-1"><a class="header-anchor" href="#integration-tests" aria-hidden="true">#</a> Integration Tests</h2><p>Integration tests which are tests designed to verify the integration of different parts of separate components of a software system together. To test some integration functionality with the database, we will use <code>mongo</code> in-memory database.</p><p>Example :Whisp service &amp; MongoDb To run the integration test locally : npm run test:integration</p><h2 id="end-to-end-tests" tabindex="-1"><a class="header-anchor" href="#end-to-end-tests" aria-hidden="true">#</a> End to End Tests</h2><p>End-to-end tests which are tests that verify an application\u2019s workflow of code base from beginning to end.This method basically aims to replicate real user scenarios so that the system can be validated for integration and data integrity. Example : Webhook, TagGroup, WhispSubscription To run the end to end test locally : npm run test:e2e</p><p>In order to run end to end tests you need <code>mongo</code>, <code>redis</code> and <code>localstack</code> to be up and running. In order to do that you up the dockers in <code>docker-compose.dev.yml</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker-compose</span> -f docker-compose.dev.yml up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> : Be aware that it will create entities in the DB and in the S3 bucket. This could interfere with your local data.</p></blockquote><h2 id="debugging-tests" tabindex="-1"><a class="header-anchor" href="#debugging-tests" aria-hidden="true">#</a> Debugging tests</h2><p>You can debug the tests in your IDE by running <code>npm run test:debug</code> or <code>npm run test:e2e:debug</code> and the launching <code>Attach to Node process</code> in the debugging tab in VSCode</p><h2 id="load-testing" tabindex="-1"><a class="header-anchor" href="#load-testing" aria-hidden="true">#</a> Load testing</h2><p>Load testing is implemented using https://k6.io/, and can be executed locally, on a remote server or directly within the CI pipeline. The current load tests are simple and can be considered experimental. PRs for more comprehensive load tests are welcome!</p><p>To run the tests, install K6: https://k6.io/docs/getting-started/installation/.</p><p>Then run the script:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>k6 run tests/load/whisp-create.load.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="execution-in-ci" tabindex="-1"><a class="header-anchor" href="#execution-in-ci" aria-hidden="true">#</a> Execution in CI</h3><ul><li>Load tests are executed within the CI pipeline in the K6 load tests workflow</li><li>This is only a beta implementation and is not currently defined as a required passing action for a PR to be merged, but if it fails this is a good indication that the PR introduces performance issues which should be investigated before the PR is approved</li><li>Due to an issue in GitHub Actions, only a simple test with a set number of VUs and duration is defined</li></ul>`,21);function a(i,o){return s}var r=e(n,[["render",a],["__file","testing.html.vue"]]);export{r as default};
