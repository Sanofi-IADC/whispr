import{_ as l,r as p,o as r,a as d,b as n,d as e,w as t,F as u,e as s,c as i}from"./app.8b4f446a.js";const c={},h=n("h1",{id:"graphql-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#graphql-api","aria-hidden":"true"},"#"),s(" GraphQL API")],-1),v=s("In this section we will be providing examples that you can use inside your very own playground available here "),m={href:"http://localhost:3000/graphql",target:"_blank",rel:"noopener noreferrer"},b=s("http://localhost:3000/graphql"),g=s(" (if you activated it)."),k=n("h2",{id:"whisps-query",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#whisps-query","aria-hidden":"true"},"#"),s(" Whisps: Query")],-1),_=n("h3",{id:"whispbyid",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#whispbyid","aria-hidden":"true"},"#"),s(" whispById")],-1),f=s("Retrieves the matching whisp by its "),q=n("code",null,"_id",-1),y=s("."),w=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getWhispById($whispId: String!) {
  whispById(
    id: $whispId
  ) {
    _id # fields you want to retrieve from the whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;whispId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),G=s("You can find the list of available fields "),x=s("here"),j=s("."),Q=i(`<h3 id="whisps" tabindex="-1"><a class="header-anchor" href="#whisps" aria-hidden="true">#</a> whisps</h3><p>Retrieves all the whisps matching a set of conditions.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getWhisps($filter: JSONObject!, $sort: JSONObject, $limit: Int) {
  whisps(filter: $filter, sort: $sort, limit: $limit) {
    _id # fields you want to retrieve from the whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),L=s("You can find the list of available fields "),$=s("here"),I=s("."),T=i(`<p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;limit&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),W=s("The filtering options are described "),S=s("here"),B=s("."),O=n("li",null,[s("The "),n("code",null,"/whisps"),s(" query accepts mongoose filtering functionality.")],-1),A=n("li",null,[s("The sort variable accepts two values "),n("code",null,"1"),s(" (ascending), and "),n("code",null,"-1"),s(" (descending)")],-1),D=n("li",null,"You can sort on nested fields this way:",-1),N=i(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1.att2&quot;</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="countwhisps" tabindex="-1"><a class="header-anchor" href="#countwhisps" aria-hidden="true">#</a> countWhisps</h3><p>Returns an array with count of matching whisps, grouped by the specified object.</p>`,3),R=s("This query uses MongoDB aggregation to group and count objects. It is the same as the MongoDB "),Y={href:"https://docs.mongodb.com/manual/reference/method/db.collection.countDocuments/",target:"_blank",rel:"noopener noreferrer"},E=s("countDocuments() function"),M=s(" but allows a custom group object."),J=n("p",null,[n("strong",null,"Parameters")],-1),C=s("filter: optional JSONObject! array of filters to apply. These will be applied with OR logic, all whisps matching any of the filters will be counted. Filtering options accept mongoose filtering functionality, described "),V=s("here"),F=s("."),U=n("li",null,"group: optional JSONObject! which contains the object fields that you would like to group on.",-1),P=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getWhispCountGrouped($filters: [JSONObject!], $group: JSONObject! ) {
  countWhisps(filter: $filters, group: $group)
  {
    _id
    count
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The query variables below provide two filters which will be applied with an OR condition, and two grouping fields which will be used to group counts based on object properties. The name and number of grouping fields is arbitrary.</p><p><strong>Notes</strong></p><ul><li>Both filter and group parameters are optional.</li><li>If no group is specified your query will return a single group with a null _id object.</li><li>If there are zero matches for the filter options, then the result of the query will be an empty array [].</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>For performance reasons it is strongly recommended to reduce the number of filters in the filter array. Instead, if possible try to provide only a few high level filters to reduce the scope of the data returned, and then rely on more granular grouping to get the specific count you need.</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token punctuation">{</span>
    <span class="token property">&quot;filters&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token property">&quot;applicationID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SMUDGE&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;data.customData.id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;503&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;applicationID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SMUDGE&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;data.customData.id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;504&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;mainGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$data.customData.id&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;secondaryGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$data.customData.description&quot;</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example output from the query above:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>
<span class="token property">&quot;countWhisps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;mainGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;503&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;secondaryGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AAAA&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;mainGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;504&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;secondaryGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AAAA&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">297</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;mainGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;504&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;secondaryGrouping&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BBBB&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example output with no group parameter (in this case to simplify the object you also just exclude _id from the query to return the count field only):</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;countWhisps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">505797</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="whisps-mutation" tabindex="-1"><a class="header-anchor" href="#whisps-mutation" aria-hidden="true">#</a> Whisps: Mutation</h2><h3 id="createwhisp" tabindex="-1"><a class="header-anchor" href="#createwhisp" aria-hidden="true">#</a> createWhisp</h3><p>Creates a new whisp.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation createWhisp($whisp: WhispInputType!) {
  createWhisp(whisp: $whisp) {
    _id # fields you want to retrieve from the created whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;whisp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;closed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// fields you want to populate</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),z=s("You can find the list of available fields "),H=s("here"),K=s("."),X=i(`<h3 id="updatewhisp" tabindex="-1"><a class="header-anchor" href="#updatewhisp" aria-hidden="true">#</a> updateWhisp</h3><p>Updates an existing whisp.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation updateWhisp($whisp: WhispInputType!, $id: String) {
  updateWhisp(whisp: $whisp, id: $id) {
    _id # fields you want to retrieve from the updated whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;whisp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;closed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// fields you want to update</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Z=s("You can find the list of available fields "),ss=s("here"),ns=s("."),es=i(`<h3 id="replacewhisp" tabindex="-1"><a class="header-anchor" href="#replacewhisp" aria-hidden="true">#</a> replaceWhisp</h3><p>Replaces an existing whisp. This endpoint has the same signature as <a href="#updateWhisp"><code>updateWhisp</code></a>, however instead of updating the fields provided in the <code>whisp</code> parameter, it will instead replace the whisp in the database with the <code>whisp</code> parameter.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation replaceWhisp($whisp: WhispInputType!, $id: String) {
  replaceWhisp(whisp: $whisp, id: $id) {
    _id # fields you want to retrieve from the updated whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;whisp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;closed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// fields you want to populate</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),as=s("You can find the list of available fields "),ts=s("here"),is=s("."),os=n("h3",{id:"deletewhisp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deletewhisp","aria-hidden":"true"},"#"),s(" deleteWhisp")],-1),ps=s("Deletes the matching whisp by its "),ls=n("code",null,"_id",-1),rs=s("."),ds=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation deleteWhispById($whispId: String!) {
  deleteWhisp(
    id: $whispId
  )
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;whispId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="whisps-subscription" tabindex="-1"><a class="header-anchor" href="#whisps-subscription" aria-hidden="true">#</a> Whisps: Subscription</h2><h3 id="whispadded" tabindex="-1"><a class="header-anchor" href="#whispadded" aria-hidden="true">#</a> whispAdded</h3><p>Subscribes the caller to the &#39;whispAdded&#39; event. The caller will receive the new whisps that match the provided filter.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>subscription whispSubscription($filter: JSONObject!) {
  whispAdded(filter: $filter) {
    _id # fields you want to retrieve from the created whisp
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),us=s("The filtering options are described "),cs=s("here"),hs=s("."),vs=s("In this section we will be providing examples that you can use inside your very own playground available here "),ms={href:"http://localhost:3000/graphql",target:"_blank",rel:"noopener noreferrer"},bs=s("http://localhost:3000/graphql"),gs=s(" (if you activated it)."),ks=n("h2",{id:"taggroups-query",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#taggroups-query","aria-hidden":"true"},"#"),s(" TagGroups: Query")],-1),_s=n("h3",{id:"taggroupbyid",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#taggroupbyid","aria-hidden":"true"},"#"),s(" tagGroupById")],-1),fs=s("Retrieves the matching tagGroup by its "),qs=n("code",null,"_id",-1),ys=s("."),ws=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getTagGroupById($tagGroupId: String!) {
  tagGroupById(
    id: $tagGroupId
  ) {
    _id # fields you want to retrieve from the tagGroup
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;tagGroupId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Gs=s("You can find the list of available fields "),xs=s("here"),js=s("."),Qs=i(`<h3 id="taggroups" tabindex="-1"><a class="header-anchor" href="#taggroups" aria-hidden="true">#</a> tagGroups</h3><p>Retrieves all the tagGroups matching a set of conditions.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getTagGroups($tagGroup: TagGroupInputType!) {
  tagGroups(tagGroup: $tagGroup) {
    _id # fields you want to retrieve from the tagGroup
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tagGroup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;I&#39;m looking for this specific title&quot;</span> <span class="token comment">// fields you want to filter on</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to retrieve all the tagGroups you can set the <code>tagGroup</code> parameter to <code>{}</code></p>`,6),Ls=s("You can find the list of available fields "),$s=s("here"),Is=s("."),Ts=i(`<h2 id="taggroups-mutation" tabindex="-1"><a class="header-anchor" href="#taggroups-mutation" aria-hidden="true">#</a> TagGroups: Mutation</h2><h3 id="createtaggroup" tabindex="-1"><a class="header-anchor" href="#createtaggroup" aria-hidden="true">#</a> createTagGroup</h3><p>Creates a new tagGroup.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation createTagGroup($tagGroup: TagGroupInputType!) {
  createTagGroup(tagGroup: $tagGroup) {
    _id # fields you want to retrieve from the created tagGroup
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tagGroup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A great title for a new tagGroup&quot;</span> <span class="token comment">// fields you want to populate</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Ws=s("You can find the list of available fields "),Ss=s("here"),Bs=s("."),Os=i(`<h3 id="updatetaggroup" tabindex="-1"><a class="header-anchor" href="#updatetaggroup" aria-hidden="true">#</a> updateTagGroup</h3><p>Updates an existing tagGroup.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation updateTagGroup($tagGroup: TagGroupInputType!, $id: String) {
  updateTagGroup(tagGroup: $tagGroup, id: $id) {
    _id # fields you want to retrieve from the updated tagGroup
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tagGroup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;This title is definetly better&quot;</span> <span class="token comment">// fields you want to update</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),As=s("You can find the list of available fields "),Ds=s("here"),Ns=s("."),Rs=i(`<h3 id="replacetaggroup" tabindex="-1"><a class="header-anchor" href="#replacetaggroup" aria-hidden="true">#</a> replaceTagGroup</h3><p>Replaces an existing tagGroup. This endpoint has the same signature as <a href="#updateTagGroup"><code>updateTagGroup</code></a>, however instead of updating the fields provided in the <code>tagGroup</code> parameter, it will instead replace the tagGroup in the database with the <code>tagGroup</code> parameter.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation replaceTagGroup($tagGroup: TagGroupInputType!, $id: String) {
  replaceTagGroup(tagGroup: $tagGroup, id: $id) {
    _id # fields you want to retrieve from the updated tagGroup
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;tagGroup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A really cool title&quot;</span> <span class="token comment">// fields you want to populate</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Ys=s("You can find the list of available fields "),Es=s("here"),Ms=s("."),Js=n("h3",{id:"deletetaggroup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deletetaggroup","aria-hidden":"true"},"#"),s(" deleteTagGroup")],-1),Cs=s("Deletes the matching tagGroup by its "),Vs=n("code",null,"_id",-1),Fs=s("."),Us=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation deleteTagGroupById($tagGroupId: String!) {
  deleteTagGroup(
    id: $tagGroupId
  )
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;tagGroupId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ed644d46f91b10034d731f1&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="webhooks-query" tabindex="-1"><a class="header-anchor" href="#webhooks-query" aria-hidden="true">#</a> Webhooks: Query</h2>`,4),Ps=s("You can find the list of available fields "),zs=s("here"),Hs=s("."),Ks=i(`<h3 id="webhooks" tabindex="-1"><a class="header-anchor" href="#webhooks" aria-hidden="true">#</a> webhooks</h3><p>Retrieves all the webhooks.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>query getWebhooks {
  webhooks {
    _id # fields you want to retrieve from the webhook
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webhooks-mutation" tabindex="-1"><a class="header-anchor" href="#webhooks-mutation" aria-hidden="true">#</a> Webhooks: Mutation</h2><h3 id="createwebhook" tabindex="-1"><a class="header-anchor" href="#createwebhook" aria-hidden="true">#</a> createWebhook</h3><p>Creates a new webhook.</p><div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation createWebhook($webhook: WebhookInputType!) {
  createWebhook(webhook: $webhook) {
    _id # fields you want to retrieve from the created webhook
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;webhook&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://webhook.url&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;events&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;EVENT_NAME&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span>  <span class="token punctuation">{</span> <span class="token property">&quot;applicationId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application1&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deletewebhook" tabindex="-1"><a class="header-anchor" href="#deletewebhook" aria-hidden="true">#</a> deleteWebhook</h3>`,10),Xs=s("Deletes the matching webhook by its "),Zs=n("code",null,"_id",-1),sn=s("."),nn=i(`<div class="language-GraphQL ext-GraphQL line-numbers-mode"><pre class="language-GraphQL"><code>mutation deleteWebhook($webhookId: String!) {
  deleteWebhook (
    id: $webhookId
  )
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query variables</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;webhookId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5ef5f304a07efa0041904d52&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function en(an,tn){const o=p("ExternalLinkIcon"),a=p("RouterLink");return r(),d(u,null,[h,n("blockquote",null,[n("p",null,[v,n("a",m,[b,e(o)]),g])]),k,_,n("p",null,[f,e(a,{to:"/models/whisp.html#_id"},{default:t(()=>[q]),_:1}),y]),w,n("p",null,[G,e(a,{to:"/models/whisp.html"},{default:t(()=>[x]),_:1}),j]),Q,n("p",null,[L,e(a,{to:"/models/whisp.html"},{default:t(()=>[$]),_:1}),I]),T,n("ul",null,[n("li",null,[W,e(a,{to:"/api/filters.html"},{default:t(()=>[S]),_:1}),B]),O,A,D]),N,n("p",null,[R,n("a",Y,[E,e(o)]),M]),J,n("ul",null,[n("li",null,[C,e(a,{to:"/api/filters.html"},{default:t(()=>[V]),_:1}),F]),U]),P,n("p",null,[z,e(a,{to:"/models/whisp.html"},{default:t(()=>[H]),_:1}),K]),X,n("p",null,[Z,e(a,{to:"/models/whisp.html"},{default:t(()=>[ss]),_:1}),ns]),es,n("p",null,[as,e(a,{to:"/models/whisp.html"},{default:t(()=>[ts]),_:1}),is]),os,n("p",null,[ps,e(a,{to:"/models/whisp.html#_id"},{default:t(()=>[ls]),_:1}),rs]),ds,n("ul",null,[n("li",null,[us,e(a,{to:"/api/filters.html"},{default:t(()=>[cs]),_:1}),hs])]),n("blockquote",null,[n("p",null,[vs,n("a",ms,[bs,e(o)]),gs])]),ks,_s,n("p",null,[fs,e(a,{to:"/models/tagGroup.html#_id"},{default:t(()=>[qs]),_:1}),ys]),ws,n("p",null,[Gs,e(a,{to:"/models/tagGroup.html"},{default:t(()=>[xs]),_:1}),js]),Qs,n("p",null,[Ls,e(a,{to:"/models/tagGroup.html"},{default:t(()=>[$s]),_:1}),Is]),Ts,n("p",null,[Ws,e(a,{to:"/models/tagGroup.html"},{default:t(()=>[Ss]),_:1}),Bs]),Os,n("p",null,[As,e(a,{to:"/models/tagGroup.html"},{default:t(()=>[Ds]),_:1}),Ns]),Rs,n("p",null,[Ys,e(a,{to:"/models/tagGroup.html"},{default:t(()=>[Es]),_:1}),Ms]),Js,n("p",null,[Cs,e(a,{to:"/models/tagGroup.html#_id"},{default:t(()=>[Vs]),_:1}),Fs]),Us,n("p",null,[Ps,e(a,{to:"/models/webhook.html"},{default:t(()=>[zs]),_:1}),Hs]),Ks,n("p",null,[Xs,e(a,{to:"/models/webhook.html#_id"},{default:t(()=>[Zs]),_:1}),sn]),nn],64)}var pn=l(c,[["render",en],["__file","graphql.html.vue"]]);export{pn as default};
