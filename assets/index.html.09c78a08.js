import{_ as n,c as s}from"./app.17e5c984.js";const a={},e=s(`<h1 id="filters" tabindex="-1"><a class="header-anchor" href="#filters" aria-hidden="true">#</a> Filters</h1><p>Our GraphQL and REST endpoints sometimes offer you the possibility to filter, here is how this variable works:</p><h4 id="no-filter" tabindex="-1"><a class="header-anchor" href="#no-filter" aria-hidden="true">#</a> No filter</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="simple-filter" tabindex="-1"><a class="header-anchor" href="#simple-filter" aria-hidden="true">#</a> Simple filter</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter-on-nested-field" tabindex="-1"><a class="header-anchor" href="#filter-on-nested-field" aria-hidden="true">#</a> Filter on nested field</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1.att2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter-on-object" tabindex="-1"><a class="header-anchor" href="#filter-on-object" aria-hidden="true">#</a> Filter on object</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="differences-between-filter-on-nested-field-and-filter-on-object" tabindex="-1"><a class="header-anchor" href="#differences-between-filter-on-nested-field-and-filter-on-object" aria-hidden="true">#</a> Differences between Filter on nested field and Filter on object</h4><p>This object will be returned by both the &quot;Filter on nested field&quot; and the &quot;Filter on object&quot;:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;att2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This object will be returned by the &quot;Filter on nested field&quot; but not by the &quot;Filter on object&quot;:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;att2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;att3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value3&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter-with-array" tabindex="-1"><a class="header-anchor" href="#filter-with-array" aria-hidden="true">#</a> Filter with array</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="additional-filtering-functionality" tabindex="-1"><a class="header-anchor" href="#additional-filtering-functionality" aria-hidden="true">#</a> Additional filtering functionality</h4><p>Additionally some endpoints offer you the possibility to use all mongo filtering options. This is specified in the endpoint documentation.</p><p>For example, to match all values that are not equal to a specified value, you can do:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;att1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;$ne&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function t(o,i){return e}var l=n(a,[["render",t],["__file","index.html.vue"]]);export{l as default};
