# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Webhook {
  _id: ID!
  url: String!
  events: [String!]!
  filter: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type TagGroup {
  _id: ID!
  title: String!
  metalevel: String!
  applicationID: String!
  tags: [String!]!
}

type WhispAttachment {
  """Mapping of the file to a location in the data attribute"""
  dataMappingPath: String

  """Key in S3-Bucket. Call via API: <whispr-Backend>/file/<S3-Key>"""
  file: String!
}

type Whisp {
  _id: ID!
  readableID: String
  type: String
  severity: Int
  description: String
  closed: Boolean
  applicationID: String
  plantID: String
  locationID: String
  manual: Boolean
  openedBy: String
  openedById: String
  closedBy: String
  closedById: String
  timestamp: String
  updated: String
  data: JSONObject
  attachments: [WhispAttachment!]
}

type Query {
  webhooks: [Webhook!]
  tagGroups(tagGroup: TagGroupInputType!): [TagGroup!]
  tagGroupById(id: String!): TagGroup
  whispById(id: String!): Whisp
  whisps(limit: Int, sort: JSONObject, filter: JSONObject): [Whisp!]
  whispsCount(filter: JSONObject): Float!
}

"""New Tag Group"""
input TagGroupInputType {
  _id: String
  title: String
  metalevel: String
  applicationID: String
  tags: [String!]
}

type Mutation {
  createWebhook(webhook: WebhookInputType!): Webhook!
  deleteWebhook(id: String!): Boolean!
  createTagGroup(tagGroup: TagGroupInputType!): TagGroup!
  updateTagGroup(tagGroup: TagGroupInputType!, id: String!): TagGroup!
  replaceTagGroup(tagGroup: TagGroupInputType!, id: String!): TagGroup!
  deleteTagGroup(id: String!): Boolean!
  createWhisp(whisp: WhispInputType!): Whisp!
  updateWhisp(whisp: WhispInputType!, id: String!): Whisp!
  replaceWhisp(whisp: WhispInputType!, id: String!): Whisp!
  deleteWhisp(id: String!): Boolean!
}

input WebhookInputType {
  url: String!
  events: [String!]!
  filter: JSONObject
}

"""New whisp data"""
input WhispInputType {
  _id: String
  readableID: String
  type: String
  severity: Int
  description: String
  closed: Boolean
  applicationID: String
  plantID: String
  locationID: String
  manual: Boolean
  openedBy: String
  openedById: String
  closedBy: String
  closedById: String
  timestamp: DateTime
  updated: DateTime
  data: JSONObject
  attachments: [WhispAttachmentInput!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input WhispAttachmentInput {
  """Mapping of the file to a location in the data attribute"""
  dataMappingPath: String
  file: WhispFileUpload!
}

input WhispFileUpload {
  oldFile: String
  newFile: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Subscription {
  whispAdded(filter: JSONObject!): Whisp!
}
